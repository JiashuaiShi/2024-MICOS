version: '3.8'

services:
  # 质量控制服务
  fastqc:
    image: biocontainers/fastqc:v0.11.9_cv8
    container_name: micos-fastqc
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    command: ["echo", "FastQC service ready"]
    networks:
      - micos-network

  # 数据清洗服务
  kneaddata:
    image: shuai/kneaddata:0.12.0.2
    container_name: micos-kneaddata
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
      - ./references:/references
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - fastqc
    command: ["echo", "KneadData service ready"]
    networks:
      - micos-network

  # 物种分类服务
  kraken2:
    image: shuai/kraken2:2.1.3
    container_name: micos-kraken2
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
      - ./references:/references
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - kneaddata
    command: ["echo", "Kraken2 service ready"]
    networks:
      - micos-network

  # BIOM格式转换服务
  kraken-biom:
    image: shuai/kraken-biom:1.0.0
    container_name: micos-kraken-biom
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - kraken2
    command: ["echo", "Kraken-BIOM service ready"]
    networks:
      - micos-network

  # Krona可视化服务
  krona:
    image: shuai/krona:2.8.1
    container_name: micos-krona
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - kraken2
    command: ["echo", "Krona service ready"]
    networks:
      - micos-network

  # QIIME2分析服务
  qiime2:
    image: quay.io/qiime2/metagenome:2024.5
    container_name: micos-qiime2
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - kraken-biom
    command: ["echo", "QIIME2 service ready"]
    networks:
      - micos-network

  # R分析服务
  r-analysis:
    image: shuai/r_combined_analysis:4.3.3
    container_name: micos-r-analysis
    volumes:
      - ./data:/data
      - ./results:/results
      - ./logs:/logs
      - ./scripts:/scripts
    environment:
      - COMPOSE_PARALLEL_LIMIT=16
    depends_on:
      - qiime2
    command: ["echo", "R analysis service ready"]
    networks:
      - micos-network

  # Web界面服务（可选）
  web-interface:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: micos-web
    ports:
      - "8080:8080"
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
    depends_on:
      - r-analysis
    networks:
      - micos-network

  # 数据库服务（用于存储分析结果）
  database:
    image: postgres:13
    container_name: micos-database
    environment:
      - POSTGRES_DB=micos
      - POSTGRES_USER=micos_user
      - POSTGRES_PASSWORD=micos_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - micos-network

  # 监控服务
  monitoring:
    image: prom/prometheus:latest
    container_name: micos-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - micos-network

  # 日志聚合服务
  log-aggregator:
    image: grafana/loki:2.9.0
    container_name: micos-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - micos-network

  # 可视化仪表板
  dashboard:
    image: grafana/grafana:latest
    container_name: micos-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=micos_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - monitoring
      - log-aggregator
    networks:
      - micos-network

networks:
  micos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
